// Signature format: 4.0
package me.saket.telephoto.zoomable {

  @androidx.compose.runtime.Immutable public fun interface DoubleClickToZoomListener {
    method public suspend Object? onDoubleClick(me.saket.telephoto.zoomable.ZoomableState state, long centroid, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field public static final me.saket.telephoto.zoomable.DoubleClickToZoomListener.Companion Companion;
  }

  public static final class DoubleClickToZoomListener.Companion {
    method @androidx.compose.runtime.Stable public me.saket.telephoto.zoomable.DoubleClickToZoomListener cycle(optional Float? maxZoomFactor);
  }

  @Deprecated public static final class DoubleClickToZoomListener.ToggleBetweenMinAndMax implements me.saket.telephoto.zoomable.DoubleClickToZoomListener {
    method @Deprecated public suspend Object? onDoubleClick(me.saket.telephoto.zoomable.ZoomableState state, long centroid, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    field @Deprecated public static final me.saket.telephoto.zoomable.DoubleClickToZoomListener.ToggleBetweenMinAndMax INSTANCE;
  }

  @androidx.compose.runtime.Immutable public interface HardwareShortcutDetector {
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent? detectKey(android.view.KeyEvent event);
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent? detectScroll(androidx.compose.ui.input.pointer.PointerEvent event);
    field public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.Companion Companion;
  }

  public static final class HardwareShortcutDetector.Companion {
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector getDefault();
    property public final me.saket.telephoto.zoomable.HardwareShortcutDetector Default;
  }

  public static sealed interface HardwareShortcutDetector.ShortcutEvent {
    field public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.Companion Companion;
    field public static final float DefaultZoomFactor = 1.2f;
  }

  public static final class HardwareShortcutDetector.ShortcutEvent.Companion {
    method public float getDefaultPanOffset();
    property public final float DefaultPanOffset;
    field public static final float DefaultZoomFactor = 1.2f;
  }

  @dev.drewhamilton.poko.Poko public static final class HardwareShortcutDetector.ShortcutEvent.Pan implements me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent {
    ctor public HardwareShortcutDetector.ShortcutEvent.Pan(me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection direction, optional float panOffset);
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection getDirection();
    method public float getPanOffset();
    property public final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection direction;
    property public final float panOffset;
  }

  public enum HardwareShortcutDetector.ShortcutEvent.PanDirection {
    method public static me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection[] values();
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection Down;
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection Left;
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection Right;
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.PanDirection Up;
  }

  @dev.drewhamilton.poko.Poko public static final class HardwareShortcutDetector.ShortcutEvent.Zoom implements me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent {
    ctor public HardwareShortcutDetector.ShortcutEvent.Zoom(me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection direction, optional float zoomFactor, optional long centroid);
    method public long getCentroid();
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection getDirection();
    method public float getZoomFactor();
    property public final long centroid;
    property public final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection direction;
    property public final float zoomFactor;
  }

  public enum HardwareShortcutDetector.ShortcutEvent.ZoomDirection {
    method public static me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection[] values();
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection In;
    enum_constant public static final me.saket.telephoto.zoomable.HardwareShortcutDetector.ShortcutEvent.ZoomDirection Out;
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko public final class HardwareShortcutsSpec {
    ctor public HardwareShortcutsSpec(optional boolean enabled, optional me.saket.telephoto.zoomable.HardwareShortcutDetector shortcutDetector);
    method public boolean getEnabled();
    method public me.saket.telephoto.zoomable.HardwareShortcutDetector getShortcutDetector();
    property public final boolean enabled;
    property public final me.saket.telephoto.zoomable.HardwareShortcutDetector shortcutDetector;
    field public static final me.saket.telephoto.zoomable.HardwareShortcutsSpec.Companion Companion;
  }

  public static final class HardwareShortcutsSpec.Companion {
    method public me.saket.telephoto.zoomable.HardwareShortcutsSpec getDisabled();
    property public final me.saket.telephoto.zoomable.HardwareShortcutsSpec Disabled;
  }

  @androidx.compose.runtime.Immutable @dev.drewhamilton.poko.Poko public final class ZoomSpec {
    ctor public ZoomSpec(optional float maxZoomFactor, optional boolean preventOverOrUnderZoom);
    method public float getMaxZoomFactor();
    method public boolean getPreventOverOrUnderZoom();
    property public final float maxZoomFactor;
    property public final boolean preventOverOrUnderZoom;
  }

  public interface ZoomableContentLocation {
    method public androidx.compose.ui.geometry.Rect location(long layoutSize, androidx.compose.ui.unit.LayoutDirection direction);
    method @Deprecated public default long size(long layoutSize);
    field public static final me.saket.telephoto.zoomable.ZoomableContentLocation.Companion Companion;
  }

  public static final class ZoomableContentLocation.Companion {
    method @androidx.compose.runtime.Stable public me.saket.telephoto.zoomable.ZoomableContentLocation scaledInsideAndCenterAligned(androidx.compose.ui.geometry.Size? size);
    method @androidx.compose.runtime.Stable public me.saket.telephoto.zoomable.ZoomableContentLocation scaledToFitAndCenterAligned(androidx.compose.ui.geometry.Size? size);
    method @androidx.compose.runtime.Stable public me.saket.telephoto.zoomable.ZoomableContentLocation unscaledAndTopLeftAligned(androidx.compose.ui.geometry.Size? size);
    method @Deprecated public me.saket.telephoto.zoomable.ZoomableContentLocation unscaledAndTopStartAligned(androidx.compose.ui.geometry.Size? size);
  }

  public static final class ZoomableContentLocation.SameAsLayoutBounds implements me.saket.telephoto.zoomable.ZoomableContentLocation {
    method public androidx.compose.ui.geometry.Rect location(long layoutSize, androidx.compose.ui.unit.LayoutDirection direction);
    method public long size(long layoutSize);
    field public static final me.saket.telephoto.zoomable.ZoomableContentLocation.SameAsLayoutBounds INSTANCE;
  }

  public static final class ZoomableContentLocation.Unspecified implements me.saket.telephoto.zoomable.ZoomableContentLocation {
    method public androidx.compose.ui.geometry.Rect location(long layoutSize, androidx.compose.ui.unit.LayoutDirection direction);
    method public long size(long layoutSize);
    field public static final me.saket.telephoto.zoomable.ZoomableContentLocation.Unspecified INSTANCE;
  }

  @androidx.compose.runtime.Immutable public interface ZoomableContentTransformation {
    method public androidx.compose.ui.geometry.Offset? getCentroid();
    method public long getContentSize();
    method public long getOffset();
    method public float getRotationZ();
    method public long getScale();
    method public me.saket.telephoto.zoomable.ZoomableContentTransformation.ScaleMetadata getScaleMetadata();
    method public default long getTransformOrigin();
    method public boolean isSpecified();
    method public default boolean isUnspecified();
    property public abstract androidx.compose.ui.geometry.Offset? centroid;
    property public abstract long contentSize;
    property public abstract boolean isSpecified;
    property public default boolean isUnspecified;
    property public abstract long offset;
    property public abstract float rotationZ;
    property public abstract long scale;
    property public abstract me.saket.telephoto.zoomable.ZoomableContentTransformation.ScaleMetadata scaleMetadata;
    property public default long transformOrigin;
  }

  public static interface ZoomableContentTransformation.ScaleMetadata {
    method public long getInitialScale();
    method public float getUserZoom();
    property public abstract long initialScale;
    property public abstract float userZoom;
  }

  public final class ZoomableKt {
    method @Deprecated public static androidx.compose.ui.Modifier zoomable(androidx.compose.ui.Modifier, me.saket.telephoto.zoomable.ZoomableState state, optional boolean enabled, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,? extends kotlin.Unit>? onClick, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,? extends kotlin.Unit>? onLongClick, optional boolean clipToBounds);
    method public static androidx.compose.ui.Modifier zoomable(androidx.compose.ui.Modifier, me.saket.telephoto.zoomable.ZoomableState state, optional boolean enabled, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit>? onClick, optional kotlin.jvm.functions.Function1<? super androidx.compose.ui.geometry.Offset,kotlin.Unit>? onLongClick, optional boolean clipToBounds, optional me.saket.telephoto.zoomable.DoubleClickToZoomListener onDoubleClick);
  }

  @androidx.compose.runtime.Stable public sealed interface ZoomableState {
    method public boolean getAutoApplyTransformations();
    method public androidx.compose.ui.Alignment getContentAlignment();
    method public androidx.compose.ui.layout.ContentScale getContentScale();
    method public me.saket.telephoto.zoomable.ZoomableContentTransformation getContentTransformation();
    method public androidx.compose.ui.geometry.Rect getTransformedContentBounds();
    method public Float? getZoomFraction();
    method public me.saket.telephoto.zoomable.ZoomSpec getZoomSpec();
    method public suspend Object? panBy(long offset, optional androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> animationSpec, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? resetZoom(optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method @Deprecated public default suspend Object? resetZoom(boolean withAnimation, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public void setAutoApplyTransformations(boolean);
    method public void setContentAlignment(androidx.compose.ui.Alignment);
    method public void setContentLocation(me.saket.telephoto.zoomable.ZoomableContentLocation location);
    method @Deprecated public suspend void setContentLocation(me.saket.telephoto.zoomable.ZoomableContentLocation location);
    method public void setContentScale(androidx.compose.ui.layout.ContentScale);
    method public suspend Object? zoomBy(float zoomFactor, optional long centroid, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    method public suspend Object? zoomTo(float zoomFactor, optional long centroid, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> animationSpec, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public abstract boolean autoApplyTransformations;
    property public abstract androidx.compose.ui.Alignment contentAlignment;
    property public abstract androidx.compose.ui.layout.ContentScale contentScale;
    property public abstract me.saket.telephoto.zoomable.ZoomableContentTransformation contentTransformation;
    property public abstract androidx.compose.ui.geometry.Rect transformedContentBounds;
    property public abstract Float? zoomFraction;
    property public abstract me.saket.telephoto.zoomable.ZoomSpec zoomSpec;
    field public static final me.saket.telephoto.zoomable.ZoomableState.Companion Companion;
  }

  public static final class ZoomableState.Companion {
    method public androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> getDefaultPanAnimationSpec();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getDefaultZoomAnimationSpec();
    property public final androidx.compose.animation.core.AnimationSpec<androidx.compose.ui.geometry.Offset> DefaultPanAnimationSpec;
    property public final androidx.compose.animation.core.AnimationSpec<java.lang.Float> DefaultZoomAnimationSpec;
  }

  public final class ZoomableStateKt {
    method @Deprecated @androidx.compose.runtime.Composable public static me.saket.telephoto.zoomable.ZoomableState rememberZoomableState(optional me.saket.telephoto.zoomable.ZoomSpec zoomSpec, optional boolean autoApplyTransformations);
    method @androidx.compose.runtime.Composable public static me.saket.telephoto.zoomable.ZoomableState rememberZoomableState(optional me.saket.telephoto.zoomable.ZoomSpec zoomSpec, optional boolean autoApplyTransformations, optional me.saket.telephoto.zoomable.HardwareShortcutsSpec hardwareShortcutsSpec);
  }

}

package me.saket.telephoto.zoomable.internal {

  @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets=kotlin.annotation.AnnotationTarget.CLASS) public @interface AndroidParcelize {
  }

}

